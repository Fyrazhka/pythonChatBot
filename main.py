import re
from random import random, randint
from telegram import Update, ChatPermissions
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import datetime


TOKEN = '6811190281:AAGyrZjcONPUSSMSYGPBg0VY_Z-7oNHdwJ8'
users_info_set = set()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –≥—Ä—É–ø–ø–µ
async def welcome_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    new_members = update.effective_message.new_chat_members
    for member in new_members:
        welcome_message=f"""‚¨õÔ∏è‚¨õÔ∏è‚¨õÔ∏è‚¨õÔ∏è‚¨õÔ∏è‚¨õÔ∏è‚¨õÔ∏è‚¨õÔ∏è‚¨õÔ∏è‚¨õ
        –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, {member.first_name}!
        –†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤ –∫—É–±–∏—á–µ—Å–∫–æ–º –∏ –º–Ω–æ–≥–æ–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ.
        
        –°–ø–µ—à—É —É–≤–µ–¥–æ–º–∏—Ç—å, –∫–∞–∫ –Ω–æ–≤–∏—á–∫–∞, —á—Ç–æ –∏–º–µ—è –±–æ–ª—å—à–æ–µ –∂–µ–ª–∞–Ω–∏–µ
        –Ω—É–∂–Ω–æ —Å–∫–∏–Ω—É—Ç—å—Å—è –Ω–∞ –Ω–æ–≤—ã–µ –æ–±–æ–∏ –≤ –±–µ—Å–µ–¥—É.
        –≠—Ç–æ –ø–æ—Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–π –∏ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–µ
        
        –ú—ã –≤—Å–µ–≥–¥–∞ –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã –∫ —Ç–µ–±–µ –∏ –¥—Ä—É–≥–∏–º (–ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏)
        –ù–∞—à–∏ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ —Ä–∞–º–∫–∏ –æ—Ç 14-24 –ª–µ—Ç.
        
        –ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:
        üñ§ —É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        üñ§ –æ–ø—Ä–æ—Å—ã
        üñ§ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
        üñ§ –∏–≥—Ä—ã
        üñ§ –ø–æ–Ω–∏–º–∞—é—â–∏–π –∏ –Ω–µ –æ—á–µ–Ω—å –∫–æ–ª–ª–µ–∫—Ç–∏–≤
        üñ§ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∏ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        üñ§ —Å–±–æ—Ä —Å—Ä–µ–¥—Å—Ç–≤ –∞–¥–º–∏–Ω—É –Ω–∞ –ø–∏—Ü—Ü—É
        üñ§ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –º–æ–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª–µ–π (–µ—Å–ª–∏ –∏—Ö –ø–æ –∫–∞–∫–æ–π-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ–π –ø—Ä–∏—á–∏–Ω–µ –µ—â—ë –∑–¥–µ—Å—å –Ω–µ—Ç)
        
        ({member.first_name})–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞. –í –∑–∞–∫—Ä–µ–ø–µ.
        –ê–¥–º–∏–Ω –ø–æ—Ç–æ–º —Å–ø—Ä–æ—Å–∏—Ç –Ω–∞ –ø–∞–º—è—Ç—å.
        
        ü§ç–†–∞—Å—Å–∫–∞–∂–∏ –Ω–∞–º –≤ –∫—Ä–∞—Ü–µ –æ —Å–µ–±–µ, –º—ã —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º —Ç–µ–±—è –ø–æ—Å–ª—É—à–∞–µ–º.
        –ù–µ –∑–∞–±—É–¥—å —Å–∫–∞–∑–∞—Ç—å –Ω–∞–º 3 —Ü–∏—Ñ—Ä—ã –Ω–∞ –æ–±–æ—Ä–æ—Ç–µ –∫–∞—Ä—Ç—ã!ü§óü§ç
        
        
        ‚¨õÔ∏è‚¨õÔ∏è‚¨õÔ∏è‚¨õÔ∏è‚¨õÔ∏è‚¨õÔ∏è‚¨õÔ∏è‚¨õÔ∏è‚¨õÔ∏è‚¨õ"""
        await context.bot.send_message(chat_id=chat_id, text=welcome_message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –≤—ã—Ö–æ–¥–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –≥—Ä—É–ø–ø—ã
async def leave_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    left_members = update.effective_message.left_chat_member
    if left_members:
        leave_message = f"{left_members.first_name} –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É. –í—Å–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ!"
        await context.bot.send_message(chat_id=chat_id, text=leave_message)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "/start":
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥—Ä—É–ø–ø—ã.")


async def random_number(update, context):
    chat_id = update.effective_chat.id
    try:
        match = re.search(r'^/random\s+(\d+)-(\d+)$', update.message.text)
        print("Match:", update.message.text+" "+str(match)+" "+str(match.groups()))
        if match:
            start, end = match.groups()
            start = int(start)
            end = int(end)
            random_num = randint(start, end)
            await context.bot.send_message(chat_id=chat_id, text=f"–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: {random_num}")
        else:
           await context.bot.send_message(chat_id=chat_id, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /random 1-100")
    except Exception as e:
        print("Error:", e)
        await context.bot.send_message(chat_id=chat_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")

async def display_rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    rules_message = """
    –û–ë–©–ò–ï –ü–†–ê–í–ò–õ–ê
    üî™ 
    1. –£–≤–∞–∂–µ–Ω–∏–µ: 
    –°–ª–µ–¥—É–µ—Ç –ø—Ä–æ—è–≤–ª—è—Ç—å —É–≤–∞–∂–µ–Ω–∏–µ –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞–º, –∏–∑–±–µ–≥–∞—è –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π, —É–Ω–∏–∂–µ–Ω–∏–π –∏ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è.
    –ü–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.
    
    2. –ù–µ —Å–ø–∞–º–∏—Ç—å: 
    –ò–∑–±–µ–≥–∞–π—Ç–µ –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
    –ó–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏–∏.
    
    3. –£–≤–∞–∂–µ–Ω–∏–µ —á—É–∂–∏—Ö –º–Ω–µ–Ω–∏–π:
    –í–∞–∂–Ω–æ —É–≤–∞–∂–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –∏ –Ω–∞—á–∏–Ω–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏–∑-–∑–∞ —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–π.
    
    4. –ù–µ —Ä–∞–∑–≥–ª–∞—à–∞—Ç—å –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: 
    –î–µ–ª–∏—Ç–µ—Å—å –ª–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –≤ –æ—Ç–∫—Ä—ã—Ç–æ–π –±–µ—Å–µ–¥–µ —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –ª—é–¥—å–º–∏.
    
    5.–¢–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å: 
    –ú—ã —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ–µ –æ–±—â–µ—Å—Ç–≤–æ –∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –Ω–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º. 
    –í –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞–∑—ã–≤–∞—Ç—å —á–µ–ª–æ–≤–µ–∫–∞:
    –ß–µ—Ä–≤–µ–º - —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω–µ—á–Ω–æ—Å—Ç–µ–π —É —á–µ–ª–æ–≤–µ–∫–∞.
    –ß—É—Ä–±–∞–Ω–æ–º - —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ—Å—Ç—å —á–µ–ª–æ–≤–µ–∫–∞.
    –ì—É—Å–µ–º - —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —É—Ç–∏–Ω–æ–µ –ª–∏—Ü–æ —á–µ–ª–æ–≤–µ–∫–∞.
    –ó–ª—ã–º - —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –Ω–µ–¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–µ–ª–æ–≤–µ–∫–∞.
    
    –≠—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–º–æ–≥—É—Ç —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏—è—Ç–Ω—É—é –∏ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—É—é –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏. üî™
        """
    await context.bot.send_message(chat_id=chat_id, text=rules_message)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –º—É—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞
async def mute_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = update.message.from_user
    chat_member = await context.bot.get_chat_member(chat_id, user.id)
    if chat_member.status == "administrator" or chat_member.status == "creator":
        try:
            command, username, mute_time_str = update.message.text.split()
            mute_time = int(mute_time_str)
            user_id = find_user_id_by_username(username)
            if user_id is None:
                await context.bot.send_message(chat_id=chat_id, text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            user = await context.bot.get_chat_member(chat_id, user_id)
            if user.status in ["creator", "administrator"]:
                await context.bot.send_message(chat_id=chat_id, text="–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–º—É—Ç–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è –≥—Ä—É–ø–ø—ã.")
                return

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC
            current_time_utc = datetime.datetime.now(datetime.UTC)
            # –í—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞ –∏ –ø—Ä–∏–±–∞–≤–ª—è–µ–º –µ–µ –∫ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏
            until_date_utc = current_time_utc + datetime.timedelta(seconds=mute_time)

            await context.bot.restrict_chat_member(chat_id=chat_id, user_id=user_id, permissions=ChatPermissions(can_send_messages=False), until_date=until_date_utc)
            await context.bot.send_message(chat_id=chat_id, text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.user.username} –±—ã–ª –∑–∞–º—É—á–µ–Ω –Ω–∞ {mute_time} —Å–µ–∫.")
        except (IndexError, ValueError):
            await context.bot.send_message(chat_id=chat_id, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /mute username 300")


async def kick_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = update.message.from_user
    chat_member = await context.bot.get_chat_member(chat_id, user.id)
    if chat_member.status == "administrator" or chat_member.status == "creator":
        try:
            command, username = update.message.text.split()
            user_id = find_user_id_by_username(username)
            if user_id is None:
                await context.bot.send_message(chat_id=chat_id, text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            user = await context.bot.get_chat_member(chat_id, user_id)
            if user.status in ["creator", "administrator"]:
                await context.bot.send_message(chat_id=chat_id, text="–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–º—É—Ç–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è –≥—Ä—É–ø–ø—ã.")
                return

            await context.bot.ban_chat_member(chat_id, user_id)
            await context.bot.send_message(chat_id=chat_id, text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.user.username} –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –±–µ—Å–µ–¥—ã.")
        except (IndexError, ValueError):
            await context.bot.send_message(chat_id=chat_id, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /kick username")

def find_user_id_by_username(username):
    with open('user_info.txt', 'r') as file:
        for line in file:
            line_username, user_id = line.strip().split(' ')
            if line_username == username:
                return int(user_id)
    return None

async def delete_message_containing_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    message_text = update.effective_message.text
    message_sender = update.effective_message.from_user
    print(message_text+ " "+str(message_sender ))
    user_info = (message_sender.username, message_sender.id)
    users_info_set.add(user_info)
    save_users_info_to_file(users_info_set)
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è El_futurRo
    if message_sender.is_bot == True:
        await context.bot.delete_message(chat_id=chat_id, message_id=update.effective_message.message_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –∏ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    if "@ChatKeeperBot" in message_text or "@ChatKeeperBotEN" in message_text:
        await context.bot.delete_message(chat_id=chat_id, message_id=update.effective_message.message_id)

def save_users_info_to_file(users_info_set):
    with open('user_info.txt', 'w') as file:
        for user_info in users_info_set:
            file.write(f"{user_info[0]} {user_info[1]}\n")
def main():
    application = ApplicationBuilder().token(TOKEN).build()

    welcome_handler = MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, welcome_user)
    application.add_handler(welcome_handler)

    leave_handler = MessageHandler(filters.StatusUpdate.LEFT_CHAT_MEMBER, leave_user)
    application.add_handler(leave_handler)

    random_handler = CommandHandler("random", random_number)
    application.add_handler(random_handler)

    rules_handler = CommandHandler("rules", display_rules)
    application.add_handler(rules_handler)

    mute_handler = CommandHandler("mute", mute_user)
    application.add_handler(mute_handler)

    kick_handler = CommandHandler("kick", kick_user)
    application.add_handler(kick_handler)

    delete_handler = MessageHandler(filters=filters.TEXT, callback=delete_message_containing_text)
    application.add_handler(delete_handler)

    message_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
    application.add_handler(message_handler)

    application.run_polling()

if __name__ == '__main__':
    main()